type Agent {
    id: ID!
    name: String!
    email: String
    createdAt: String
    updatedAt: String
    referrals: [AgentReferral]
}

type User {
    id: ID!
    name: String!
    phoneNumber: String!
    email: String
    agent: Agent
    createdAt: String
    updatedAt: String
}

type AgentReferral {
    phoneNumber: String!
    agentId: String!
    agent: Agent
    referralDate: String!
}

input AgentInput {
    name: String!
    email: String
}

input UserInput {
    name: String!
    phoneNumber: String!
    email: String
}

type Query {
    # Agent queries
    agent(id: ID!): Agent
    agents: [Agent]
    
    # User queries
    user(id: ID!): User
    userByPhoneNumber(phoneNumber: String!): User
    users: [User]
    
    # Referral queries
    referral(phoneNumber: String!): AgentReferral
    referralsByAgentId(agentId: ID!): [AgentReferral]
    latestReferralByAgentId(agentId: ID!): AgentReferral
    referrals: [AgentReferral]
}

type Mutation {
    # Agent mutations
    createAgent(input: AgentInput!): Agent
    updateAgent(id: ID!, input: AgentInput!): Agent
    deleteAgent(id: ID!): Boolean
    
    # User mutations
    createUser(input: UserInput!): User
    updateUser(id: ID!, input: UserInput!): User
    deleteUser(id: ID!): Boolean
    
    # Referral mutations
    createReferral(agentId: ID!, phoneNumber: String!): AgentReferral
    deleteReferral(phoneNumber: String!): Boolean
}

schema {
    query: Query
    mutation: Mutation
}
